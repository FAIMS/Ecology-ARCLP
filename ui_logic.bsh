/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;

User user; // don't touch
String userid;
String username;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view latestNonDeletedArchEntFormattedIdentifiers;");
    fetchOne("CREATE VIEW latestNonDeletedArchEntFormattedIdentifiers as " +
              "SELECT uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted " +
              "FROM ( " +
                "SELECT uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder " +
                "FROM ( " +
                  "SELECT uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid " +
                  "FROM latestNonDeletedArchent " +
                    "JOIN aenttype using (aenttypeid) " +
                    "JOIN (SELECT * FROM idealaent where isIdentifier='true') using (aenttypeid) " +
                    "join attributekey  using (attributeid) " +
                    "left outer join latestNonDeletedAentValue using (uuid, attributeid) " +
                    "left outer join vocabulary using (attributeid, vocabid) " +
                  "order by uuid, aentcountorder, vocabcountorder " +
                ") " +
                "group by uuid, attributeid " +
                "having response is not null " +
                "order by uuid, aentcountorder) " +
              "group by uuid " +
              "order by uuid;"
    );


}
makeLocalID();





/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

populateUsers() {
	userid = null;
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

populateUserDetailsAndShowControl() {
	userid = getListItemValue();
    fetchOne("SELECT userid,fname,lname,email FROM user where userid='" + userid + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user); 
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

populateControlTabGroup() {
	if (userid == null) userid = getListItemValue(); // userid will only be null on first login (and subsequent accesses of the login tabgroup)

    q  = "";
    q += "SELECT  UUID, Measure ";
    q += "FROM    AentValue ";
    q += "WHERE   AttributeID IS NOT NULL ";
    q += "AND     Deleted IS NULL ";
    q += "AND     AttributeID IN ( ";
    q += "    SELECT  AttributeID ";
    q += "    FROM    AttributeKey ";
    q += "    WHERE   AttributeName='recordId');";
    fetchAll(q, new FetchCallback() {
    onFetch(result) {
    	print("load result:  " + result);
      	populateList("control/control/savedRecords", result);
    }   
  });
}

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});



entity_id = null;
saveEntity() {
	enable_autosave = true;
	saveTabGroup("bettong", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
	    	entity_id = uuid;
	    	if(newRecord) {
	    		showToast("{New_Record_Created}");
	    	}
	    }
	},
	enable_autosave);
}

createEntityAndPopulateBettong() {
	entity_id = null;
    newTabGroup("bettong");
    setFieldValue("bettong/physicalCharacteristics/scribe", username);

    q  = "";
    q += "SELECT  COALESCE(MAX(Cast(Measure as decimal)), 0) + 1 ";
    q += "FROM    AentValue ";
    q += "WHERE   AttributeID IS NOT NULL ";
    q += "AND     Deleted IS NULL ";
    q += "AND     AttributeID IN ( ";
    q += "    SELECT  AttributeID ";
    q += "    FROM    AttributeKey ";
    q += "    WHERE   AttributeName='recordId');";

    fetchOne(q, new FetchCallback() {
        onFetch(result) {
			setFieldValue("bettong/physicalCharacteristics/recordId", result.get(0));
			saveEntity();
        }
    });
}

loadEntityAndPopulateBettong() {
  entity_id = getListItemValue();
  showTabGroup("bettong", entity_id);
}

getGpsCoordinates() {
    location = getGPSPosition();
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
    	showWarning("{Err_Loc}", "{Err_Con}");
    	return;
    }
    if (location == null){
    	showWarning("{Err_Loc}", "{Err_Sig}");
    	return;
    }

	lat = location.getLatitude();
	lon = location.getLongitude();
	tabgroup = "bettong/approachAndRemoval/";
	setFieldValue(tabgroup + "latitude",  lat);
	setFieldValue(tabgroup + "longitude", lon);
}

setSyncEnabled(true);
onEvent("bettong", "show", "saveEntity()");
onEvent("bettong/approachAndRemoval/takeFromGps", "click", "getGpsCoordinates()");
onEvent("control/control/", "show", "populateControlTabGroup()");
onEvent("control/control/buttonNewRecord",  "click", "createEntityAndPopulateBettong()");
onEvent("control/control/savedRecords", "click", "loadEntityAndPopulateBettong()");
onEvent("user/usertab", "show", "populateUsers()");
onEvent("user/usertab/users", "click", "populateUserDetailsAndShowControl()");