/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view latestNonDeletedArchEntFormattedIdentifiers;");
    fetchOne("CREATE VIEW latestNonDeletedArchEntFormattedIdentifiers as " +
              "SELECT uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted " +
              "FROM ( " +
                "SELECT uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder " +
                "FROM ( " +
                  "SELECT uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid " +
                  "FROM latestNonDeletedArchent " +
                    "JOIN aenttype using (aenttypeid) " +
                    "JOIN (SELECT * FROM idealaent where isIdentifier='true') using (aenttypeid) " +
                    "join attributekey  using (attributeid) " +
                    "left outer join latestNonDeletedAentValue using (uuid, attributeid) " +
                    "left outer join vocabulary using (attributeid, vocabid) " +
                  "order by uuid, aentcountorder, vocabcountorder " +
                ") " +
                "group by uuid, attributeid " +
                "having response is not null " +
                "order by uuid, aentcountorder) " +
              "group by uuid " +
              "order by uuid;"
    );


}
makeLocalID();





/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("SELECT userid, fname || ' ' || lname FROM user WHERE userdeleted IS null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("SELECT userid,fname,lname,email FROM user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user); 
            username = result.get(1) + " " + result.get(2);
            loadControlTabGroup();
        }
    });
}

entity_id = null;
saveEntity() {
	enable_autosave = true;
	saveTabGroup("bettong", entity_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
	    	entity_id = uuid;
	    	if(newRecord) {
	    		showToast("New record created");
	    	}
	    }
	},
	enable_autosave);
}

newRecord() {
	entity_id = null;
     newTabGroup("bettong");
     setFieldValue("bettong/physicalCharacteristics/scribe", username);
}

// loadRecord() {

// }

loadControlTabGroup() {
    showTabGroup("control");

    // fetchAll("SELECT uuid, recordId FROM bettongRecord;", new FetchCallback() {
    //     onFetch(result) {
    //     	print("load result:  " + result);
    //         populateList("control/control/savedRecords", result);
    //     }
    // });

    fetchAll("select uuid, uuid from archentity where uuid || aenttimestamp in ( select uuid || max(aenttimestamp) from archentity group by uuid having deleted is null);", new FetchCallback() {
    onFetch(result) {
    	print("load result:  " + result);
      	populateList("control/control/savedRecords", result);
    }   
  });
}

loadEntity() {
  entity_id = getListItemValue();
  showTabGroup("bettong", entity_id, new FetchCallback() {
    onFetch(result) {
      entity = result;
      showToast("Loaded entity " + entity.getId());
  	}
  });
}

onEvent("control/control/savedRecords", "click", "loadEntity()");
onEvent("bettong", "show", "saveEntity()");

// update() {
//   fetchAll("select uuid, uuid from archentity where uuid || aenttimestamp in ( select uuid || max(aenttimestamp) from archentity group by uuid having deleted is null);", new FetchCallback() {
//     onFetch(result) {
//       populateDropDown("bettong/physicalCharacteristics/processingPerson", result);
//     }   
//   });
// }
 



// loadRecord() {
//   // entity_id = getFieldValue("bettong/physicalCharacteristics/processingPerson");
//   entity_id = "1000011427412068878";
//   showTabGroup("bettong", entity_id, new FetchCallback() {
//     onFetch(result) {
//       entity = result;
//       showToast("Loaded entity " + entity.getId());
//     }
//   });
// }


setSyncEnabled(true);
onEvent("user/usertab/users", "click", "login()");
onEvent("control/control/buttonNewRecord",  "click", "newRecord()");
loadUsers();
